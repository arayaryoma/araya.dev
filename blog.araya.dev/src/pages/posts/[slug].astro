---
import { getCollection } from "astro:content";
import { getChangelog } from "../../../build/changelog";
import Layout from "../../layouts/Layout.astro";

export async function getStaticPaths() {
  const blogEntries = await getCollection("blog");
  const entries = blogEntries.map((entry) => {
    return {
      params: { slug: entry.slug },
      props: { entry },
    };
  });
  const promises = entries.map(async (item) => {
    const log = await getChangelog(item.props.entry.id);
    return { ...item, props: { ...item.props, log } };
  });
  return await Promise.all(promises);
}

const { entry, log } = Astro.props;
const { slug } = Astro.params;

const { Content } = await entry.render();

const repo = "https://github.com/arayaryoma/araya.dev";

import "../../styles/markdown.css";
---

<Layout title={entry.data.title} ogImageUrl={`/posts/${slug}.og.png`}>
  <div>
    <nav class="container">
      <ul class="post__breadcrumb">
        <li class="post__breadcrumb-item">
          <a href="/">投稿一覧</a>
        </li>
        <li class="post__breadcrumb-item">{entry.data.title}</li>
      </ul>
    </nav>
    <article class="container post__container">
      <header class="post-header">
        <time class="post-header--datetime">{entry.data.date}</time>
        <h1 class="post-header--title">{entry.data.title}</h1>
      </header>
      <main class="post--main">
        <div class="post--content markdown">
          <Content />
          <details class="post__changelog">
            <summary>変更履歴</summary>
            {
              log &&
                log.map((history) => (
                  <p>
                    <a href={`${repo}/commit/${history.hash}`} target="_blank">
                      <code>{history?.hash?.slice(0, 8)}</code>
                      <span class="post__changelog-message">
                        {history.subject}
                      </span>
                    </a>
                  </p>
                ))
            }
          </details>
        </div>
      </main>
      <footer class="post__footer"></footer>
    </article>
  </div>
</Layout>

<style>
  .post__breadcrumb {
    margin: 62px 0;
    list-style: none;
    display: flex;
    flex-wrap: wrap;
    font-size: var(--font-size-md);
  }

  .post__breadcrumb-item a {
    color: var(--butterfly-blue);
  }

  .post__breadcrumb-item:not(:first-child)::before {
    content: ">";
    display: inline-block;
    text-align: center;
    width: 1em;
    height: 1em;
  }

  .post-header {
    font-size: var(--font-size-xxl);
    line-height: 1.5em;
    padding: 30px 0;
    width: 100%;
    display: grid;
    grid-column-gap: var(--grid-column-gap);
    grid-template-columns: var(--grid-template-columns);
  }

  .post-header--datetime {
    font-size: var(--font-size-s);
    grid-column: 2 / 12;
    height: auto;
    line-height: 1.5em;
    display: flex;
    align-items: flex-end;
  }

  .post-header--title {
    font-size: inherit;
    grid-column: 2 / 12;
    margin: 0;
  }

  .post--main {
    display: grid;
    grid-column-gap: var(--grid-column-gap);
    grid-template-columns: var(--grid-template-columns);
    padding: 30px 0;
  }

  @media screen and (prefers-color-scheme: dark) {
    :root:not([data-color-scheme="light"]) .post--main,
    :root:not([data-color-scheme="light"]) .post-header {
      color: var(--gray-light-4);
    }
  }

  :root[data-color-scheme="dark"] .post--main,
  :root[data-color-scheme="dark"] .post-header {
    color: var(--gray-light-4);
  }

  .post--content {
    grid-column: 2 / 12;
    font-size: var(--font-size-sm);
    line-height: 1.5em;
    overflow: auto;
  }

  .post__changelog {
  }

  .post__changelog a {
    color: var(--eyes-blue);
  }

  .post__changelog-message {
    margin-inline-start: 1em;
  }

  @media screen and (max-width: 767px) {
    .post-header {
      font-size: var(--font-size-md);
    }
    .post__container {
      width: 100%;
    }
    .post__breadcrumb {
      margin: 62px 0;
      font-size: var(--font-size-xs);
      padding: 0;
    }
  }
</style>
