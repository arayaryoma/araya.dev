---
import ColorSchemeToggle from "./color-scheme-toggle.astro";
---

<site-preference>
  <template shadowroot="open">
    <div class="container">
      <button type="button" data-toggle-button class="toggle-button">
        <img
          src="https://araya.dev/assets/gear-white.svg"
          alt="サイト設定"
          class="icon"
        />
      </button>
      <dialog data-dropdown-menu class="dropdown-menu">
        <ul>
          <li class="dropdown-menu-item">
            <span>Light</span>
            <ColorSchemeToggle />
            <span>Dark</span>
          </li>
        </ul>
      </dialog>
    </div>
    <style>
      :root {
        --dropdown-menu-width: 320px;
      }
      * {
        box-sizing: border-box;
      }
      ul {
        padding: 0;
        margin: 0;
      }
      .container {
        position: relative;
      }
      .icon {
        width: 48px;
      }

      .toggle-button {
        background: none;
        border: none;
      }

      .dropdown-menu {
        list-style: none;
      }

      dialog:not([open]) {
        pointer-events: none;
        opacity: 0;
      }

      .dropdown-menu {
        display: flex;
        width: var(--dropdown-menu-width);
        flex-direction: column;
        background: var(--mat-black);
        box-shadow: 0 0 10px 0 var(--black);
        position: absolute;
        top: var(--global-nav-height);
        right: 0;
        left: calc(-1 * var(--dropdown-menu-width));
        color: var(--gray-light-5);
        font-size: var(--font-size-body);
      }

      .dropdown-menu-item {
        height: 100px;
        display: flex;
        align-items: center;
      }
    </style>
  </template>
</site-preference>

<script>
  class SitePreference extends HTMLElement {
    /**
     * @type {HTMLButtonElement | null}
     */
    #toggleButton;
    /**
     * @type {HTMLButtonElement | null}
     */
    #dropdownMenuDialog;

    /**
     * @type {"open" | "close"}
     */
    #dropdownMenuState;
    constructor() {
      super();
      this.#toggleButton = null;
      this.#dropdownMenuDialog = null;
      this.#dropdownMenuState = "close";
    }
    connectedCallback() {
      if (!this.shadowRoot) {
        throw new Error(`${this} should have a shadow root`);
      }
      this.#toggleButton = this.shadowRoot.querySelector(
        "[data-toggle-button]"
      );
      this.#dropdownMenuDialog = this.shadowRoot.querySelector(
        "[data-dropdown-menu]"
      );
      this.#toggleButton?.addEventListener("click", (e) => {
        e.preventDefault();
        this.toggleDropdownMenu();
      });
    }

    toggleDropdownMenu() {
      if (this.#dropdownMenuState === "close") {
        this.#dropdownMenuState = "open";
        this.#dropdownMenuDialog?.show();
      } else {
        this.#dropdownMenuState = "close";
        this.#dropdownMenuDialog?.close();
      }
    }
  }

  customElements.define("site-preference", SitePreference);
</script>
